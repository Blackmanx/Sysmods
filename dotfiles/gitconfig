[color]
    ui = auto

[push]
    default = simple

[alias]
    co = checkout
    cob = checkout -b

    st = status

    ci = commit --verbose
    cia = commit -a --verbose

    mff = merge --ff-only
    mffpom = !git mff  && git pom

    pull-r = "!git pull --recurse-submodules=on-demand; git submodule update --remote"
    pull-rr = "!git pull --rebase --recurse-submodules=on-demand; git submodule update --remote"
    update-r = submodule update --recursive --remote
    push-r = push --recurse-submodules=on-demand

    # Update all remotes
    rup = remote update --prune

    po = push origin
    pom = push origin master

    branchdiff = !sh -c \"git diff `git oldest-ancestor`..\"
    branchlog = !sh -c \"git log `git oldest-ancestor`..\"

    lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr %an)%Creset' --abbrev-commit --date=relative
    lg19 = !git lg -n 19
    lg10 = !git lg -n 10
    lg15 = !git lg -n 15
    lg14 = !git lg -n 14
    lg16 = !git lg -n 16
    lg5 = !git lg -n 5
    lg4 = !git lg -n 4
    lg6 = !git lg -n 6

    cp = cherry-pick

    # Potentially very destructive, reset your working copy to a clean "just cloned" state
    wipe = "!git reset --hard;git clean -fdx"

    push-origin-master = !git pom
    commit-add = !git mff
    checkout-branch = !git cob
    checkout-master = !git com
    push-origin-master = !git pom
    restack = !sh -c \"git rebase -v -i `git oldest-ancestor`\"

    # Not sure how this works anymore
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ $`echo $VAR` = \\\"$OLD\\\" ]]; then export $VAR=\\\"$NEW\\\"; fi\" $@; }; f"

    # Conflict resolution
    resolveall = !git status -s | grep '^UU' | sed s@...@@ | xargs git add
    editcornflakes = !vim `git status -s | grep '^UU' | sed s@...@@` -c '/^<<<<<<<$\\|^=======$\\|^>>>>>>>$'
    findcornflakes = grep '^<<<<<<<$'


[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f

# vim: filetype=gitconfig
