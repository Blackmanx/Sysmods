#!/bin/bash

alias chmox='chmod +x'
alias keys='. ~/keys.sh'
alias ls='ls --color'
alias vimr='vim --remote'
alias gvimr='gvim --remote'

umask 022

export PATH=$HOME/dev/depot_tools:$PATH
export PATH=$HOME/dev/Sysmods/scripts:$PATH
export PATH=$HOME/dev/Sysmods/chroot:$PATH
export PATH=$HOME/dev/Sysmods/Scripts:$PATH
export PATH=$HOME/.cabal/bin:$PATH
export PATH=$HOME/dev/the_silver_searcher:$PATH

# Base dir for all Android development tools / libraries / kits
export MY_ANDROID_BASE=$HOME/dev/Android
# Link to current 'sdk' directory within ADT
export MY_ANDROID_SDK=$MY_ANDROID_BASE/AndroidSdk
# Link to current 'Android Development Toolkit'
export MY_ANDROID_ADT=$MY_ANDROID_BASE/ADT
export MY_ADT_PLUGINS=$MY_ANDROID_ADT/eclipse/plugins
# Link to current NDK
export MY_ANDROID_NDK=$MY_ANDROID_BASE/AndroidNdk

function g()
{
    ( # Run in subshell (to preserve parent's $PWD):
        while `true`; do
            if [[ `pwd` == "/" ]]; then
                echo "!!! Script gradlew not found in any parent path"
                return
            fi
            if [[ -e `pwd`/gradlew ]]; then
                `pwd`/gradlew ${*}
                return
            fi
            cd ..
        done
    )
}

function fname()
{
    find . -iname "*$1*"
}

function get_ant_dir()
{
    cd $MY_ADT_PLUGINS;
    ls -1 --color=never --directory --group-directories-first \
        org.apache.ant* | head -1
}

function apath_adt()
{
    echo "Adding ADT and ANT's Ant to the path..."

    export PATH=$MY_ANDROID_SDK/platform-tools:$PATH
    export PATH=$MY_ANDROID_SDK/tools:$PATH

    export ANDROID_HOME=$MY_ANDROID_SDK
    export ANDROID_SDK=$MY_ANDROID_SDK

    ECLIPSE_ANT=$MY_ADT_PLUGINS/$(get_ant_dir)/bin/

    export PATH=$ECLIPSE_ANT:$PATH
}

function sfastboot()
{
    sudo $MY_ANDROID_SDK/platform-tools/fastboot ${*}
}

function apath_ndk()
{
    echo "Add the Android NDK to the path..."

    export ANDROID_NDK=$MY_ANDROID_NDK
    export PATH=$ANDROID_NDK:$PATH
}

function setup_aosp_var()
{
    echo "Setting up AOSP_PATH variable..."

    export AOSP_PATH=$MY_ANDROID_BASE/AOSP/WC
}

function apath_ndk_arm_toolchain()
{
    echo "Adding static Android ARM toolchain to the path..."

    export PATH=$PATH:$MY_ANDROID_BASE/ArmToolchain/bin
}

function setup_android()
{
    apath_adt
    apath_ndk
    setup_aosp_var
    apath_ndk_arm_toolchain
}

#function setup_devdroid()
#{
#    export DEVDROID=$HOME/dev/devdroid
#    export PATH=$DEVDROID/tools:$PATH
#}

alias dirs='dirs -v'

## Color definitions:
export COLOR_NC='\e[0m' # No Color
export COLOR_WHITE='\e[1;37m'
export COLOR_BLACK='\e[0;30m'
export COLOR_BLUE='\e[0;34m'
export COLOR_LIGHT_BLUE='\e[1;34m'
export COLOR_GREEN='\e[0;32m'
export COLOR_LIGHT_GREEN='\e[1;32m'
export COLOR_CYAN='\e[0;36m'
export COLOR_LIGHT_CYAN='\e[1;36m'
export COLOR_RED='\e[0;31m'
export COLOR_LIGHT_RED='\e[1;31m'
export COLOR_PURPLE='\e[0;35m'
export COLOR_LIGHT_PURPLE='\e[1;35m'
export COLOR_BROWN='\e[0;33m'
export COLOR_YELLOW='\e[1;33m'
export COLOR_GRAY='\e[0;30m'
export COLOR_LIGHT_GRAY='\e[0;37m'

cd() {
   MAX=20
   LEN=${#DIRSTACK[@]}

   if [ $# -eq 0 ] || [ "$1" = "-" ]; then
      builtin cd "$@"
      pushd -n $OLDPWD > /dev/null
   else
      pushd "$@" > /dev/null || return 1
   fi

   if [ $LEN -gt 1 ]; then
      for i in `seq 1 $LEN`; do
         eval "p=~$i"
         if [ "$p" = "$PWD" ]; then
            popd -n +$i > /dev/null
            break
         fi
      done
   fi

   if [ $LEN -ge $MAX ]; then
      popd -n -0 > /dev/null
   fi
}

update_history() {
    history -n
}

vboxdate () {
   # Adjust VM BIOS time to a given date
   secs=$(date --date="$2" +%s)    # convert supplied date to secs, since 1970-01-01
   let secs-=$(date +%s)           # subtract the date NOW
   msecs=$(( $secs * 1000 ))       # convert to millis
   echo Adjusting time ${msecs}ms
   echo VBoxManage modifyvm $1 --biossystemtimeoffset ${msecs};
}

#export PATH="$HOME/.rbenv/bin:$PATH"
#if [ -n "`which rbenv`" ]; then
#    eval "$(rbenv init -)"
#fi

if [ -n "$SCHROOT_CHROOT_NAME" ]; then

    echo -n "`echo -e $COLOR_LIGHT_GREEN`>>>`echo -e $COLOR_NC` "
    echo -n "Inside chroot named: $SCHROOT_CHROOT_NAME "
    echo    "`echo -e $COLOR_LIGHT_GREEN`<<<`echo -e $COLOR_NC`"
    echo

    export PS1="$COLOR_LIGHT_RED{$SCHROOT_CHROOT_NAME}$COLOR_NC $PS1"
    export DISPLAY=:0.0

    xhost + &> /dev/null || (echo "Failed to setup X host access")
fi

#export UNDER_SCRIPT=1
#if [ -z "$UNDER_SCRIPT" ]; then
#
#    logdir=$HOME/Logs
#    logname=$(date +%F_%T).$$.script
#
#    logfile=$logdir/.$logname
#    final_logfile=$logdir/$logname
#
#    trap '( mv $logfile $final_logfile )' EXIT
#
#    if [ ! -d $logdir ]; then
#        mkdir $logdir
#    fi
#
#    gzip -q $logdir/*.script &>/dev/null
#
#    export UNDER_SCRIPT=$logfile
#
#    script -e -f -q $logfile
#    exit $?
#fi

if [ -z "$SCHROOT_CHROOT_NAME" ]; then
    shopt -s direxpand &> /dev/null || (echo "Failed to set direxpand option")
fi

alias branch-name='echo jam-`date +%Y%m%d`'
alias donesound='mplayer /home/jam/Downloads/Transfer complete.mp3'

export MY_ECLIPSE=$MY_ANDROID_ADT/eclipse/eclipse
alias launch_adt='screen -dmS eclipse $MY_ECLIPSE'

export MY_ANDROID_STUDIO=$MY_ANDROID_BASE/android-studio/bin/studio.sh
alias launch_as='screen -dmS studio $MY_ANDROID_STUDIO'

set MOZILLA_FIVE_HOME=/usr/lib/firefox

#cp_p()
#{
#   strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
#      | awk '{
#        count += $NF
#            if (count % 10 == 0) {
#               percent = count / total_size * 100
#               printf "%3d%% [", percent
#               for (i=0;i<=percent;i++)
#                  printf "="
#               printf ">"
#               for (i=percent;i<100;i++)
#                  printf " "
#               printf "]\r"
#            }
#         }
#         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
#}

export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/dev/Sysmods/cp_p:$PATH

alias rscp='rsync -aSPh'
alias rsmv='rsync -aSPh --remove-source-files'

PROMPT_COMMAND="history -a;"

if [[ $(uname) == "Darwin" ]]; then
	not_linux=1
	readlink='greadlink'
else
	not_linux=
	readlink='readlink'
fi

if [[ -n $MANUAL_HOSTNAME ]]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@'$MANUAL_HOSTNAME'\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'"\$(__git_ps1)"' \n\$ '
elif [[ -z $not_linux ]]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'"\$(__git_ps1)"' \n\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w'"\$(__git_ps1)"' \n\$ '
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

this_dir=$(dirname $($readlink -f ${BASH_SOURCE}))
source $this_dir/../git-completion.bash
source $this_dir/../git-prompt.sh

export GIT_PS1_SHOWDIRTYSTATE=1

export JAVA_HOME=$(dirname $(dirname $(dirname $(realpath $(which java)))))
