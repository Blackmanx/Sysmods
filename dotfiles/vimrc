" {{{ Basic vim config

set nocp
set hidden
set nu

if version >= 703
    set colorcolumn=80
endif

set et
set ts=4
set sts=4
set sw=4
" }}}

function! ToggleVerbose()
    if !&verbose
        set verbosefile=~/.vim/verbose.log
        set verbose=9
    else
        set verbose=0
        set verbosefile=
    endif
endfunction


" {{{ Vundle Init
syntax on
filetype off " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" }}}

let g:miniBufExplCheckDupeBufs = 0
let g:miniBufExplVSplit = 30
let g:miniBufExplorerAutoStart = 0

" {{{ Whitspace stuff
"flag problematic whitespace (trailing and spaces before tabs)
"Note you get the same by doing let c_space_errors=1 but
"this rule really applys to everything.
"highlight RedundantSpaces term=standout ctermbg=red guibg=red
"match RedundantSpaces /\s\+$\| \+\ze\t/ "\ze sets end of match so only spaces highlighted
set list listchars=tab:Â»Â·,trail:Â·
" }}}

" {{{ Back-up / swapfile config
set backup
set swapfile
set backupdir=~/.vim-tmp,~/tmp,/var/tmp,/tmp,$HOME/Local\ Settings/Temp,.
set directory=~/.vim-tmp,~/tmp,/var/tmp,/tmp,$HOME/Local\ Settings/Temp,.
" }}}

" {{{ CtrlP config
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
let g:ctrlp_max_files = 0
" }}}

let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
"let g:ycm_auto_trigger = 0 "Disable auto trigger
"let g:EclimCompletionMethod = 'omnifunc'
let g:nailgun_port = 44666
let g:javacomplete_ng = '/usr/bin/ng-nailgun'
let g:netrw_liststyle=3

"let g:tmux_navigator_no_mappings = 1

"let g:EasyMotion_leader_key = '<Leader>'

" {{{ NeoCompl cache setup
let g:neocomplcache_enable_auto_delimiter = 0
" }}}

autocmd Filetype java setlocal omnifunc=javacomplete#Complete
autocmd Filetype haskell setlocal omnifunc=necoghc#omnifunc

" Force bash mode for shell scripts?
let g:is_bash = 1

" {{{ ultisnips
let g:UltiSnipsExpandTrigger="<c-b>"
let g:UltiSnipsListSnippets="<c-b>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

inoremap <silent> <C-b> <C-R>=UltiSnips#ExpandSnippetOrJump()<cr>
snoremap <silent> <C-b> <Esc>:call UltiSnips#ExpandSnippetOrJump()<cr>
xnoremap <silent> <C-b> :call UltiSnips#SaveLastVisualSelection()<cr>gvs
inoremap <silent> <C-b> <C-R>=UltiSnips#ListSnippets()<cr>
snoremap <silent> <C-b> <Esc>:call UltiSnips#ListSnippets()<cr>

" }}}

" {{{ Git gutter config
highlight GitGutterAddDefault ctermbg=0
highlight GitGutterChangeDefault ctermbg=0
highlight GitGutterDeleteDefault ctermbg=0
" }}}

" {{{ Vim plugins
Plugin 'gmarik/Vundle.vim'
Plugin 'tomtom/vimtlib'
Plugin 'tomtom/tinykeymap_vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'brookhong/cscope.vim'
Plugin 'Rykka/riv.vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'tfnico/vim-gradle'
Plugin 'vim-scripts/gtags.vim'
Plugin 'vim-scripts/groovy.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-fugitive'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/nerdtree'
Plugin 'rking/ag.vim'
Plugin 'majutsushi/tagbar'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'solarnz/thrift.vim'
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'cilquirm/javacomplete'
Plugin 'silverjam/javacomplete'
Plugin 'eagletmt/neco-ghc'
Plugin 'tpope/vim-dispatch'
Plugin 'vim-scripts/Mark--Karkat'
"Plugin 'naseer/logcat'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'airblade/vim-gitgutter'
Plugin 'Blackrush/vim-gocode'
"Plugin 'Shougo/neosnippet-snippets'
"Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
"Plugin 'ardagnir/united-front'
Plugin 'scrooloose/syntastic'
Plugin 'junegunn/vim-easy-align'
Plugin 'vim-scripts/Align'
" }}}

" {{{ Vundle finalization
call vundle#end()
filetype plugin indent on
filetype on
" }}}

" {{{ Completion stuff
set wildmenu
set wildmode=longest:list,full
set completeopt=longest,menuone
" }}}

" {{{ Configure Solarized color scheme
set mouse=a
"set t_Co=256
set background=dark

"let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_contrast="high"
let g:solarized_visibility="normal"

colorscheme solarized
" }}}

let mapleader = ","

nnoremap <silent> <c-a>h :TmuxNavigateLeft<cr>
nnoremap <silent> <c-a>j :TmuxNavigateDown<cr>
nnoremap <silent> <c-a>k :TmuxNavigateUp<cr>
nnoremap <silent> <c-a>l :TmuxNavigateRight<cr>
nnoremap <silent> <c-a>\ :TmuxNavigatePrevious<cr>

"nnoremap <silent> <F8> :TlistToggle<CR>
nnoremap <silent> <Leader>x :bp\|bd #<CR>
nnoremap <silent> <Leader>jr :redraw!<CR>

noremap <C-\>t :TagbarToggle<CR>
nnoremap <C-\>t :TagbarToggle<CR>
noremap <C-\>n :NERDTreeToggle<CR>
nnoremap <C-\>n :NERDTreeToggle<CR>

set tags+=~/dev/openjdk6/tags

"nmap <Leader>gr :Gtags -r<SPACE>
"nmap <Leader>gl :Gtags -f %<CR>
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>
"nmap <C-\><C-]> :GtagsCursor<CR>

cabbr <expr> %% expand('%:p:h')

"nmap <C-k>h :FSwitch<CR>
"map <F4> :execute "vimgrep /" . expand("<cword>") . "/j *.java" <Bar> cw<CR>

cmap w!! w !sudo tee % >/dev/null

"nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
"nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

if &term == 'xterm' || &term == 'screen'
"    set t_Co=256
endif

let g:airline_theme = 'solarized'
let g:airline_left_sep='â€º'
let g:airline_right_sep='â€¹'
set laststatus=2

let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

set list
set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:. " Highlight problematic whitespace

set cursorline
set showmatch
set hlsearch

" {{{ BROKEN COLOR CONFIG!?
"set t_Co=256
"let g:solarized_termtrans=0    "default value is 0
"let g:solarized_termcolors=256    "default value is 16
"set background=dark
"colorscheme solarized
" }}}

nnoremap <silent> <F8> :TlistToggle<CR>
nnoremap <silent> <Leader>x :bp\|bd #<CR>

"let g:cscope_cmd = 'pycscope'
"let g:pymode_lint_write = 1
let g:syntastic_check_on_wq = 0
"let g:syntastic_java_javac_config_file_enabled = 1
let g:riv_global_leader = "<C-J>"
let g:syntastic_java_javac_classpath = ""

" Tmux hack?
map <Esc>[B <Down>
map <Esc>[D <Left>
map <Esc>[A <Up>
map <Esc>[C <Right>

" {{{ UnBundle junk for spf13
"UnBundle 'spf13/vim-autoclose'
"UnBundle 'eagletmt/ghcmod-vim'
"UnBundle 'Shougo/vimproc'
"UnBundle 'Twinside/vim-haskellConceal'
"UnBundle 'Shougo/neosnippet'
"UnBundle 'tpope/vim-markdown'
"UnBundle 'jnwhiteh/vim-golang'
"UnBundle 'spf13/vim-gocode'
" }}}

"if empty($VIMBG)
"    set bg=dark
"else
"    let envvimbg=$VIMBG
"    let &bg=envvimbg
"endif

if empty($TMUX)
    " Do nothing...
else
    set t_ku=[A
    set t_kd=[B
    set t_kr=[C
    set t_kl=[D
endif

" {{{ CScope setup (Disabled)
"if has("cscope")
if 0
    set csprg=/usr/bin/cscope
    set csto=0
    set cst

"    let parent=1
"    let dir = "./"
"    while parent <= 10
"      if filereadable(dir . "cscope.out")
"          break
"      endif
"      let dir = "../" . dir
"      let parent = parent+1
"      if simplify(dir) ==# "/"
"          break
"      endif
"    endwhile
"
"    let cscope_db = simplify($PWD . "/" . dir . "cscope.out")
"
"    if filereadable(cscope_db)
"        echo cscope_db
"        cs add cscope_db
"    elseif $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    endif
"
"    unlet parent
"    unlet dir
"    unlet cscope_db

    function! LoadCscope()
      let db = findfile("cscope.out", ".;")
      if (!empty(db))
        let path = strpart(db, 0, match(db, "/cscope.out$"))
        set nocscopeverbose " suppress 'duplicate connection' error
        exe "cs add " . db . " " . path
        set cscopeverbose
      endif
    endfunction

    au BufEnter /* call LoadCscope()

	noremap <C-\>ct :cstag <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>ct :cstag <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>ct :cs find t <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>ct :cs find t <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>ce :cs find e <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>ce :cs find e <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nnoremap <C-\>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>
	noremap <C-\>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nnoremap <C-\>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	noremap <C-\>cd :cs find d <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cd :cs find d <C-R>=expand("<cword>")<CR><CR>

endif
" }}}

" {{{ Go code config
set runtimepath+=$GOROOT/misc/vim
" }}}

let s:onlySourcePattern = '^\(.*[.]gradle$\|.*[.]java$\|.*[.]cpp$\|.*[.]h$\|.*[.]thrift$\|.*[.]xml$\)\@!.*[[file]]'

function! FunJmOnlySource()
    let g:NERDTreeIgnore += [s:onlySourcePattern]
endfunction

command! JmOnlySource call FunJmOnlySource()

function! FunJmEverything()
    call filter(g:NERDTreeIgnore, 'v:val !==# "' . s:onlySourcePattern . '"')
endfunction

command! JmEverything call FunJmEverything()

function! FunResetNerdIgnore()
    let g:NERDTreeIgnore = []
endfunction

command! JmResetNerdTreeIgnore call FunResetNerdIgnore()

" vim: fdm=marker:
