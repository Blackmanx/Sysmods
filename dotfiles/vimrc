
" The next three lines ensure that the ~/.vim/bundle/ system works
"filetype on
"filetype off
"set rtp+=~/.vim/bundle/vundle
"call vundle#rc()

"execute pathogen#infect()

syntax on
set nocp

filetype off " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

filetype plugin indent on

set hidden

if version >= 703
    set colorcolumn=80
endif

let g:miniBufExplCheckDupeBufs = 0
let g:miniBufExplVSplit = 30
let g:miniBufExplorerAutoStart = 0

set et
set ts=4
set sts=4
set sw=4

noremap <C-\>t :TagbarToggle<CR>
nnoremap <C-\>t :TagbarToggle<CR>
noremap <C-\>n :NERDTreeToggle<CR>
nnoremap <C-\>n :NERDTreeToggle<CR>

"nmap <C-k>h :FSwitch<CR>

let g:ctrlp_cmd = 'CtrlPBuffer'

"map <F4> :execute "vimgrep /" . expand("<cword>") . "/j *.java" <Bar> cw<CR>

"let b:start_time=localtime()
"
"au BufRead,BufNewFile * let b:start_time=localtime()
"au CursorHold * call UpdateFile()
"" only write if needed and update the start time after the save
"function! UpdateFile()
"  if ((localtime() - b:start_time) >= 5)
"    update
"    let b:start_time=localtime()
"  else
"    echo "Only " . (localtime() - b:start_time) . " seconds have elapsed so far."
"  endif
"endfunction
"
"au BufWritePre * let b:start_time=localtime()

cmap w!! w !sudo tee % >/dev/null

"nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
"nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

if &term == 'xterm' || &term == 'screen'
    set t_Co=256
endif

let g:airline_theme = 'solarized'
let g:airline_left_sep='›'
let g:airline_right_sep='‹'
set laststatus=2

let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

set cursorline
set showmatch
set hlsearch

Plugin 'gmarik/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'tomtom/vimtlib.git'
Plugin 'tomtom/tinykeymap_vim.git'
Plugin 'vim-scripts/taglist.vim.git'
Plugin 'brookhong/cscope.vim.git'
Plugin 'Rykka/riv.vim.git'
Plugin 'plasticboy/vim-markdown'
Plugin 'tfnico/vim-gradle'
Plugin 'vim-scripts/gtags.vim'
Plugin 'vim-scripts/groovy.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'airblade/vim-gitgutter'
"Plugin 'https://github.com/kien/ctrlp.vim'

Plugin 'Blackrush/vim-gocode'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'nathanaelkane/vim-indent-guides'

call vundle#end()
filetype plugin indent on

syntax enable

set t_Co=256
let g:solarized_termtrans=0    "default value is 0
"let g:solarized_termcolors=256    "default value is 16
set background=dark
colorscheme solarized

nnoremap <silent> <F8> :TlistToggle<CR>
nnoremap <silent> <Leader>x :bp\|bd #<CR>

"let g:cscope_cmd = 'pycscope'
"let g:pymode_lint_write = 1
let g:syntastic_check_on_wq = 0
let g:riv_global_leader = "<C-J>"

"UnBundle 'spf13/vim-autoclose'
"UnBundle 'eagletmt/ghcmod-vim'
"UnBundle 'Shougo/vimproc'
"UnBundle 'Twinside/vim-haskellConceal'
"UnBundle 'Shougo/neosnippet'
"UnBundle 'tpope/vim-markdown'
"UnBundle 'jnwhiteh/vim-golang'
"UnBundle 'spf13/vim-gocode'

"if empty($VIMBG)
"    set bg=dark
"else
"    let envvimbg=$VIMBG
"    let &bg=envvimbg
"endif

set runtimepath+=$GOROOT/misc/vim

if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst

"    let parent=1
"    let dir = "./"
"    while parent <= 10
"      if filereadable(dir . "cscope.out")
"          break
"      endif
"      let dir = "../" . dir
"      let parent = parent+1
"      if simplify(dir) ==# "/"
"          break
"      endif
"    endwhile
"
"    let cscope_db = simplify($PWD . "/" . dir . "cscope.out")
"
"    if filereadable(cscope_db)
"        echo cscope_db
"        cs add cscope_db
"    elseif $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    endif
"
"    unlet parent
"    unlet dir
"    unlet cscope_db

    function! LoadCscope()
      let db = findfile("cscope.out", ".;")
      if (!empty(db))
        let path = strpart(db, 0, match(db, "/cscope.out$"))
        set nocscopeverbose " suppress 'duplicate connection' error
        exe "cs add " . db . " " . path
        set cscopeverbose
      endif
    endfunction

    au BufEnter /* call LoadCscope()

	noremap <C-\>ct :cstag <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>ct :cstag <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>ct :cs find t <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>ct :cs find t <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>ce :cs find e <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>ce :cs find e <C-R>=expand("<cword>")<CR><CR>
	noremap <C-\>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nnoremap <C-\>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>
	noremap <C-\>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nnoremap <C-\>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	noremap <C-\>cd :cs find d <C-R>=expand("<cword>")<CR><CR>
	nnoremap <C-\>cd :cs find d <C-R>=expand("<cword>")<CR><CR>

endif

let g:neocomplcache_enable_auto_delimiter = 0
